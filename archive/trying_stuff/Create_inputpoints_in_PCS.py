# -*- coding: utf-8 -*-
"""
Created on Tue May 19 14:52:52 2020

@author: ctorti
"""

"""
Function:
    Create_inputpoints_in_PCS()
    
Purpose:
    Create a text file containing points for Elastix's Transformix to deform
    in the Patient Coordinate System (i.e. without accounting for the Image
    Plane attributes).
    
    A text file will be generated in the current working directory with the 
    format required of Elastix, i.e.:
        
    point
    number_of_points
    point1_x point1_y point1_z
    point2_x point2_y point2_z
    ...

    The contour points (ContourPts) will be obtained from the 
    DICOM-RTSTRUCT (ROI Collection generated by OHIF-Viewer) file.  
    Another function called GetDicoms() reads in the DICOMs.
    
    FixedContourPts are in the form:
        
    [
     [],
     [],
     ...
     [
      [point1_x_contourN, point1_y_contourN, point1_z_contourN],
      [point2_x_contourN, point2_y_contourN, point2_z_contourN],
      ...
      [pointM_x_contourN, pointM_y_contourN, pointM_z_contourN]
      ], 
     [],
     ]
     
    where each array corresponds to a slice in Dicoms. 
    
    If any given array is empty, i.e. [], there is no contour for that slice.  
    If there is a contour, the points 
    
    [point1_x_contourN, point1_y_contourN, point1_z_contourN],
    [point2_x_contourN, point2_y_contourN, point2_z_contourN],
    ...
    [pointM_x_contourN, pointM_y_contourN, pointM_z_contourN]
      
    are the M points that make up a contour for the nth slice in Dicoms.


Input:
    DicomDir        - Directory containing DICOMs 
    
    RoiFpath        - Filepath of the DICOM-RTSTRUCT ROI Collection
    
    
    
Returns:
    inputpoints.pts - Text file containing points in ROI Collection in format
                      required of Elastix
    
"""


def Create_inputpoints_in_PCS(DicomDir, RoiFpath):
    # Import packages:
    import pydicom
    from GetDicoms import GetDicoms
    #from GetContourPoints3D import GetContourPoints3D
    #from Get3DContourPointsFromDicoms import Get3DContourPointsFromDicoms
    import os
    
    
    # Get the DICOMs:
    DicomFpaths, Dicoms = GetDicoms(DicomDir, 'slices', Debug=False)

    # Read in the ROI Collection:
    Roi = pydicom.dcmread(RoiFpath)
    
    # Create an array of contour points for all DICOMs:
    AllContourPoints = []
    
    # Loop through each DICOM and get the contour points that relate to it:
    for Dicom in Dicoms:
        
        # Get the SOP Instance UID, Image Position Patient, Orientation and 
        # Pixel Spacing from Dicom:
        SopUid = Dicom.SOPInstanceUID      
        
        # Get a list of the Contour Sequences in the Roi:
        ContourSequences = Roi.ROIContourSequence[0].ContourSequence
        
        # Get a list of all Referenced SOP Instance UIDs from the ContourSequences:
        RefSopUids = [sequence.ContourImageSequence[0]\
                      .ReferencedSOPInstanceUID for sequence in ContourSequences]
        
        # Create an array of (x,y) points from the flattened contour data:
        ContourPoints = []
            
        # Get the index of the Contour Sequence whose Referenced SOP Instance UID
        # matches the DICOM's SOP Instance UID:
        """ Note that a contour sequence may not exist for this Dicom, so check if
        SopUid is in RefSopUids.  Proceed only if true. """
        if SopUid in RefSopUids:
            #ind = RefSopUids.index(SopUid) # this will only find the first match,
            # and there may be more than one!
            
            # Get the indeces of all matching RefSopUids:
            inds = [i for i, e in enumerate(RefSopUids) if e==SopUid]
            
            # Iterate for each index in inds:
            for ind in inds:
                # Get the Contour Sequence that corresponds to this ind:
                ContourSequence = ContourSequences[ind]
                
                # Get the Contour Data and number of contour points for this 
                # ContourSequence:
                ContourData = [float(item) for item in ContourSequence.ContourData]
                #NoContourPts = int(ContourSequence.NumberOfContourPoints)
            
                # Store the contour points for each contour ("_c"):
                """ Note: There will be multiple contours if len(inds) > 1. """
                ContourPoints_c = []
                
                # Iterate for all contour points in threes:
                for p in range(0, len(ContourData), 3):
                    ContourPoints_c.append([ContourData[p],
                                            ContourData[p+1],
                                            ContourData[p+2]])
    
                    
                # Append contourPts with ContourPts_c:
                #ContourPoints.append(ContourPoints_c)
                ContourPoints.extend(ContourPoints_c)
                
                
        # If ContourPoints is [] print warning:
        #if ContourPoints==[]:
        #    print('No contour points were found for this DICOM (none of',
        #          'the Referenced SOP Instance UIDs in the Contour Sequence',
        #          'match the \nDICOM SOP Instance UID).')
        
        
        # Append ContourPoints to AllContourPts:
        AllContourPoints.append(ContourPoints)
        
        
        
    
    # Get the number of points:
    N = 0
    
    for ArrayOfPts in AllContourPoints:
        N = N + len(ArrayOfPts)
    
    
    # Define the filename for the exported file:
    TextFname = 'inputpoints.txt'
    #TextFname = 'inputpoints.pcs'
    
    # Open a text file:
    TextFile = open(TextFname, 'w')

    # Write 'point' to the first line:
    TextFile.write('point')
    
    # Write the number of points to the second line:
    TextFile.write(f'\n{N}')
    
    # Write all points in ContourPts to each subsequent line in the required 
    # format:
    for ArrayOfPts in AllContourPoints:
        if ArrayOfPts:
            # Loop through each array of 3D points within each ArrayOfPts and 
            # add the points on a new line with space between points:
            for Point in ArrayOfPts:
                TextFile.write(f'\n{Point[0]} {Point[1]} {Point[2]}')
                # Round to 1 decimal to see if any effect on outputpoints.txt:
                #TextFile.write(f'\n{round(Point[0], 1)} {round(Point[1], 1)} {round(Point[2], 1)}') 
                """ Rounding to 1 decimal (as shown in the sample usage) did
                not make any difference. """
                
    TextFile.close()
    
    # Get working directory:
    CWD = os.getcwd()
    
    print('\nContour points exported to', os.path.join(CWD, TextFname), '.')
    
    return