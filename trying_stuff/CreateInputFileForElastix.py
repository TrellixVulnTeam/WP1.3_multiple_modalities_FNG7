# -*- coding: utf-8 -*-
"""
Created on Tue May 19 14:52:52 2020

@author: ctorti
"""

"""
Function:
    CreateInputFileForElastix()
    
Purpose:
    Create a text file containing points for Elastix's Transformix to deform.
    
    A text file will be generated in the current working directory with the 
    format required of Elastix, i.e.:
        
    point
    number_of_points
    point1_x point1_y point1_z
    point2_x point2_y point2_z
    ...

    The contour points (ContourPts) will be obtained by running a function 
    called GetContourPoints3D(), that uses tags in the DICOMs (Dicoms) and the 
    DICOM-RTSTRUCT (ROI Collection generated by OHIF-Viewer) file to obtain the 
    contour points in image space.  Another function called GetDicoms() reads 
    in the DICOMs.
    
    FixedContourPts are in the form:
        
    [
     [],
     [],
     ...
     [
      [point1_x_contourN, point1_y_contourN, point1_z_contourN],
      [point2_x_contourN, point2_y_contourN, point2_z_contourN],
      ...
      [pointM_x_contourN, pointM_y_contourN, pointM_z_contourN]
      ], 
     [],
     ]
     
    where each array corresponds to a slice in Dicoms. 
    
    If any given array is empty, i.e. [], there is no contour for that slice.  
    If there is a contour, the points 
    
    [point1_x_contourN, point1_y_contourN, point1_z_contourN],
    [point2_x_contourN, point2_y_contourN, point2_z_contourN],
    ...
    [pointM_x_contourN, pointM_y_contourN, pointM_z_contourN]
      
    are the M points that make up a contour for the nth slice in Dicoms.


Input:
    DicomDir        - Directory containing DICOMs 
    
    RoiFpath        - Filepath of the DICOM-RTSTRUCT ROI Collection
    
    
    
Returns:
    inputpoints.pts - Text file containing points in ROI Collection in format
                      required of Elastix
    
"""


def CreateInputFileForElastix(DicomDir, RoiFpath):
    # Import packages:
    import pydicom
    from GetDicoms import GetDicoms
    #from GetContourPoints3D import GetContourPoints3D
    from GetAllContourPoints3D import GetAllContourPoints3D
    
    
    # Get the DICOMs:
    #DicomFpaths, Dicoms = GetDicoms(DicomDir, 'slices', Debug=False)

    # Read in the ROI Collection:
    #Rois = pydicom.dcmread(RoiFpath)
    
    # Create an array of contour points:
    #ContourPts = []
    
    #for i in range(len(Dicoms)):
    #    ContourPts.append(GetContourPoints3D(Dicoms[i], Rois))
        
    # Get the contour points:
    ContourPts = GetAllContourPoints3D(DicomDir, RoiFpath)
    
    # Get the number of points:
    N = 0
    
    for ArrayOfPts in ContourPts:
        N = N + len(ArrayOfPts)
    
    
    # Define the filename for the exported file:
    TextFname = 'inputpoints.txt'
    #TextFname = 'inputpoints.pcs'
    
    # Open a text file:
    TextFile = open(TextFname, 'w')

    # Write 'point' to the first line:
    TextFile.write('point')
    
    # Write the number of points to the second line:
    TextFile.write(f'\n{N}')
    
    # Write all points in ContourPts to each subsequent line in the required 
    # format:
    for ArrayOfPts in ContourPts:
        if ArrayOfPts:
            # Loop through each array of 3D points within each ArrayOfPts and 
            # add the points on a new line with space between points:
            for Point in ArrayOfPts:
                TextFile.write(f'\n{Point[0]} {Point[1]} {Point[2]}')
                # Round to 1 decimal to see if any effect on outputpoints.txt:
                #TextFile.write(f'\n{round(Point[0], 1)} {round(Point[1], 1)} {round(Point[2], 1)}') 
                """ Rounding to 1 decimal (as shown in the sample usage) did
                not make any difference. """
                
    TextFile.close()
    
    print('\nContour points have been stored in file', TextFname, '.')
    
    return